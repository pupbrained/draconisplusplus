name: Build
on:
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  linux:
    name: Linux
    runs-on: native-linux
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Add custom tools to PATH
        run: echo "/run/current-system/sw/bin:/nix/var/nix/profiles/default/bin:$PATH" >> $GITHUB_PATH

      - name: Build glibc-generic package
        id: build_glibc
        run: echo "path=$(nix build .#glibc-generic --no-link --print-out-paths)" >> $GITHUB_OUTPUT

      - name: Push glibc-generic to Cachix
        run: cachix push pupbrained ${{ steps.build_glibc.outputs.path }}
        env:
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
          CACHIX_SIGNING_KEY: ${{ secrets.CACHIX_SIGNING_KEY }}

      - name: Build musl-generic package
        id: build_musl
        run: echo "path=$(nix build .#musl-generic --no-link --print-out-paths)" >> $GITHUB_OUTPUT

      - name: Push musl-generic to Cachix
        run: cachix push pupbrained ${{ steps.build_musl.outputs.path }}
        env:
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
          CACHIX_SIGNING_KEY: ${{ secrets.CACHIX_SIGNING_KEY }}

      - name: Upload Nix glibc-generic Artifact
        uses: actions/upload-artifact@v3
        with:
          name: nix-build-glibc-generic
          path: ${{ steps.build_glibc.outputs.path }}/bin/draconis++

      - name: Upload Nix musl-generic Artifact
        uses: actions/upload-artifact@v3
        with:
          name: nix-build-musl-generic
          path: ${{ steps.build_musl.outputs.path }}/bin/draconis++
  windows:
    name: Windows
    runs-on: [native]
    steps:
      - name: Define Persistent Paths and Ensure Directories Exist
        id: paths
        run: |
          $repoName = "${{ github.event.repository.name }}"
          $persistentSourcePath = "C:\persistent_checkout\$repoName"
          $persistentBuildPath = "C:\persistent_builds\$repoName"

          Write-Host "Persistent Source Directory: $persistentSourcePath"
          Write-Host "Persistent Build Directory: $persistentBuildPath"

          echo "source_dir=$persistentSourcePath" | Add-Content -Path $env:GITHUB_OUTPUT
          echo "build_dir=$persistentBuildPath" | Add-Content -Path $env:GITHUB_OUTPUT

          New-Item -ItemType Directory -Force -Path $persistentSourcePath | Out-Null
          New-Item -ItemType Directory -Force -Path $persistentBuildPath | Out-Null
        shell: powershell

      - name: Manually Clone or Update Code in Persistent Source Directory
        env:
          GIT_AUTH_HEADER: "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
          PERSISTENT_SOURCE_DIR: ${{ steps.paths.outputs.source_dir }}
          GIT_REPOSITORY_URL: "https://github.com/${{ github.repository }}.git"
          GIT_SHA: ${{ github.sha }}
        run: |
          Write-Host "Ensuring source code at commit '$env:GIT_SHA' is in '$env:PERSISTENT_SOURCE_DIR'"

          if (-not (Test-Path (Join-Path $env:PERSISTENT_SOURCE_DIR ".git"))) {
            if ($LASTEXITCODE -ne 0) { throw "Git clone failed." }
            cd $env:PERSISTENT_SOURCE_DIR
          } else {
            Write-Host "Existing .git directory found. Fetching and setting up..."
            cd $env:PERSISTENT_SOURCE_DIR
            git remote set-url origin $env:GIT_REPOSITORY_URL
            git fetch --all --prune --tags
            if ($LASTEXITCODE -ne 0) { throw "Git fetch failed." }
          }

          Write-Host "Checking out SHA: $env:GIT_SHA"
          git checkout --force $env:GIT_SHA
          if ($LASTEXITCODE -ne 0) { throw "Git checkout to SHA [$env:GIT_SHA] failed." }

          git clean -fdx

          Write-Host "Updating submodules..."
          git submodule sync --recursive
          git submodule update --init --force --recursive

          Write-Host "Successfully prepared source directory. Current commit:"
          git log -1 --oneline
        shell: powershell

      - name: Setup Meson Build with Persistent Source and Build Dirs
        run: >
          meson setup "${{ steps.paths.outputs.build_dir }}" "${{ steps.paths.outputs.source_dir }}" --buildtype=release
          -Dc_args="-fuse-ld=lld"
          -Dcpp_args="-fuse-ld=lld"
          -Dc_link_args="-fuse-ld=lld"
          -Dcpp_link_args="-fuse-ld=lld"
        shell: powershell

      - name: Compile with Meson in Persistent Build Directory
        run: meson compile -C "${{ steps.paths.outputs.build_dir }}"
        shell: powershell

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: "${{ steps.paths.outputs.build_dir }}\\draconis++.exe"
